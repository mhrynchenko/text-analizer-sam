{"ast":null,"code":"const TEXT_ANALIZER_LAMBDA_API = 'http://localhost:3000/text-analizer';\nexport const getWordTypesRequest = async text => {\n  try {\n    const response = await fetch(`${TEXT_ANALIZER_LAMBDA_API}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    if (!response.ok) {\n      throw new Error('Failed to get channel data');\n    }\n    const json = await response.json();\n    return json.wordTypes;\n  } catch (e) {\n    console.error(e);\n    alert('Failed to get channel data');\n  }\n};","map":{"version":3,"names":["TEXT_ANALIZER_LAMBDA_API","getWordTypesRequest","text","response","fetch","method","headers","body","JSON","stringify","ok","Error","json","wordTypes","e","console","error","alert"],"sources":["/Users/epammihail/Projects/dewais/text-analizer/apps/client/src/api/index.ts"],"sourcesContent":["const TEXT_ANALIZER_LAMBDA_API = 'http://localhost:3000/text-analizer';\n\nexport type WordTypesResponse = Array<[string, number]>;\n\nexport const getWordTypesRequest = async (text: string) => {\n  try {\n    const response = await fetch(`${TEXT_ANALIZER_LAMBDA_API}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ text }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to get channel data');\n    }\n\n    const json = await response.json();\n\n    return json.wordTypes as WordTypesResponse;\n  } catch (e) {\n    console.error(e);\n    alert('Failed to get channel data');\n  }\n};\n"],"mappings":"AAAA,MAAMA,wBAAwB,GAAG,qCAAqC;AAItE,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,IAAY,IAAK;EACzD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,wBAAyB,EAAC,EAAE;MAC1DK,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAK,CAAC;IAC/B,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC/C;IAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACS,IAAI,CAAC,CAAC;IAElC,OAAOA,IAAI,CAACC,SAAS;EACvB,CAAC,CAAC,OAAOC,CAAC,EAAE;IACVC,OAAO,CAACC,KAAK,CAACF,CAAC,CAAC;IAChBG,KAAK,CAAC,4BAA4B,CAAC;EACrC;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}